#include <iostream>
#include <random>
#include "BossMonster.h"

#include <chrono>
#include <thread>

#include "../Item/Item.h"
#include "../Item/AttackBoost.h"
#include "../Item/HealthPotion.h"

#include <windows.h>

#define DELAY_MILLI(x) std::this_thread::sleep_for(std::chrono::milliseconds(x));

using namespace std;

BossMonster::BossMonster(int Level) : Name("투명드래곤") // 투명드래곤 : 드래곤중에서도 최강의 투명드래곤이 울부짓었다. 투명드래곤은 졸라짱쎄서 드래곤중에서 최강이엇다.
{
    // 레벨에 따라 체력과 공격력을 랜덤하게 설정.
    random_device R;
    mt19937 Gen(R());
    uniform_int_distribution<int> DistHealth(30, 45); // 보스 몬스터의 체력은 기존 몬스터의 1.5배 범위를 랜덤으로 설정.
    uniform_int_distribution<int> DistAttack(75, 150); // 보스 몬스터의 공격력은 기존 몬스터의 1.5배 범위를 랜덤으로 설정.
    int RandomHealth = DistHealth(Gen);
    int RandomAttack = static_cast<int>(DistAttack(Gen) * 0.1);

    Health = Level * RandomHealth;
    Attack = Level * RandomAttack;


    // 투명드래곤 생성시 출력되는 메시지.
    std::string InvisibleDragonAppearedSTR = "드래곤중에서도 최강의 투명드래곤이 울부짖었다!\n";
    size_t SlowIDX = 35;

    size_t Length = InvisibleDragonAppearedSTR.length();
    UINT DefaultMilli = 50;
    UINT SlowMilli = 500;
    for (size_t IDX = 0; IDX < Length; ++IDX)
    {
        std::cout << InvisibleDragonAppearedSTR[IDX];
        DELAY_MILLI(DefaultMilli);
        if(IDX == SlowIDX)
        {
            DefaultMilli = SlowMilli;
        }
    }

    std::string InvisibleDragon =
        std::string(u8"⠾⢽⢵⠷⣾⣹⣃⣳⡺⢝⣷⠿⣿⢿⣕⣟⣱⣙⡹⣸⣟⣛⣻⢼⣫⣮⣯⣟⣺⣝⣹⢿⠽⣿⢻⣿⣗⣿⢿⣕⡧⣗⣺⢞⣻⡛⣮⡽⣮⡝⢬⡾⣮⣝⢮⡮⡷⣮⡵⢶⣿⣚⣧⣮⣵⡭⣫⣛⣋⣇⢿⣳⣹⣬⢽⣺⡇⣺⢝⣷⠺⣷⡮⢇⣸⠷⣷⢿⡗⡟⡸⡻⢟⢻⠿⠟⢫⢧⢳⣞⢣⡮⢟⡗⠺⡵⡶⢻⡷⢣⢸⢴⡮⢿⡸⠣⢵⢢⣢⢶\n")
                     + u8"⣣⢽⢸⡀⣧⣤⣤⡀⣿⠋⡀⢻⡀⣿⠁⡀⡇⢀⡟⢀⠈⡇⢸⡏⣀⢹⡀⣿⣾⣼⣿⢘⡀⣷⣏⡳⢾⣫⣿⡻⡶⢿⣿⡿⣇⣵⢼⢼⡳⣹⣿⡯⠇⡶⣟⣛⢺⣽⣻⣾⣳⢻⣯⢿⢅⣝⣖⣷⣎⡟⢿⡮⠳⢾⡾⣎⣼⣽⣹⡗⣜⠟⣕⡫⣧⡯⢺⢶⣇⣭⡴⠾⠻⠿⠷⠿⠿⢷⣭⣽⠟⢺⣮⠆⢳⡮⣉⢟⣧⢽⣔⡧⢻⣿⡲⡷⠪⡱⣖⢳\n"
                     + u8"⣕⣜⡟⡫⣏⣀⣀⡀⣿⡀⣟⢸⡀⣽⠐⡇⣿⡀⡇⢸⡀⡇⢈⡀⣿⡀⡀⣸⣠⣀⣼⡯⣿⢯⣸⡺⢪⣾⣳⣃⣝⣟⡷⢯⡾⢱⣻⡮⣿⢯⡿⢱⣏⣟⣽⣼⣮⣝⣫⣮⠯⣷⢷⣯⢷⣖⡾⢾⣾⡭⣿⣿⣮⢿⢟⣿⣻⡿⣮⣹⣝⣵⡝⢟⣶⣶⠟⠉⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⠙⣮⣣⡼⢕⢮⡯⡹⢺⣽⢣⠷⡞⡾⢯⣕⢶⣚⢹⣕\n"
                     + u8"⢳⣜⡕⢟⠟⠛⠛⡀⢻⡄⠁⣼⡀⣿⡀⢀⡇⡀⣧⠈⢠⡇⢸⣇⠉⣸⡀⣿⢿⡏⢯⣧⣟⡷⡟⢪⢗⣾⣟⣧⡛⡳⡿⣟⢷⡿⣿⡚⣯⣫⢝⣯⠗⠾⠿⡟⣝⢿⡾⢹⣽⢇⡾⣯⣍⡷⣏⡽⢟⣽⡛⣿⣿⢻⣫⣜⡻⢝⢏⡝⢶⡪⢸⡿⠉⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⠻⣎⢫⣷⡏⢳⣽⠭⡋⣟⣾⡳⣵⠞⢋⣤⢚⣝\n"
                     + u8"⣣⣯⣵⣯⣿⣿⣿⣿⣿⣾⢽⣿⣶⣿⣽⣿⣿⣶⣿⣿⣿⣷⣿⡽⡿⣻⣶⣿⣿⢷⣿⣿⣾⣯⣿⡽⢎⣣⢽⣯⡦⣿⣮⣿⣯⣯⣟⣿⣾⣼⢶⢛⣛⡛⠿⢿⣶⣅⠪⣟⣯⡽⡯⣾⣹⣿⣗⡿⣿⣏⣞⣺⡹⢣⣷⡯⣕⢫⣺⡭⣝⣿⠋⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⠙⣗⣟⣗⣻⣧⠿⠝⢛⣉⣥⣶⠟⣥⣺⡪⣿\n"
                     + u8"⢮⢼⡀⣤⣤⣤⣿⡄⢸⢸⠘⣧⡤⢤⡀⣸⠖⠂⡀⠒⣿⢀⢸⡀⡀⣿⡇⢸⠃⢸⣿⡀⣤⣤⡾⣽⢿⣤⡀⣤⡀⣿⣴⡀⣿⡀⣿⡀⡄⡇⢸⣧⣻⣯⡹⣟⣤⠙⣿⣦⡛⣷⣿⣷⣗⣫⣼⡹⢿⡿⣟⣎⣟⣽⢻⣟⣪⠾⡲⢾⣵⠃⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⠚⠛⣿⣷⣶⣶⣾⣿⣿⣿⣿⡿⢡⡹⢿⡽⣱⢎\n"
                     + u8"⢪⡞⣀⣀⣀⣀⣿⡀⣾⢠⠨⣇⣀⣈⣀⣸⣀⡤⡀⣤⣽⢸⡀⡀⡀⣿⠁⠈⡇⢸⣿⣀⣁⣁⣿⣿⣹⢤⠾⣤⡀⣿⣠⠾⠿⡀⣿⡀⠁⡇⢸⣿⣗⣺⣿⣟⣼⣝⡈⣿⣿⣦⠹⢾⣶⡹⢟⣭⣿⣿⢝⢷⡿⢜⢿⣜⡾⣷⣜⣸⣿⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⠏⡞⡍⡍⣛⣝⡣⢝\n"
                     + u8"⢮⣷⠙⠛⠛⠋⣿⣀⡁⢸⠠⡇⡀⠛⠛⢻⡇⠰⠷⡀⣿⡀⣸⡀⡀⣧⣸⣆⡇⢸⡟⠛⡀⠛⢳⢾⣸⣈⣀⣉⡀⣿⡀⠺⠟⢠⣏⣉⣉⡁⢸⣿⡫⣿⣾⢻⣿⣳⢯⡌⣿⣿⣿⡘⣻⣻⡿⣻⣮⣟⡻⠮⢸⣻⢪⢿⢵⣏⣾⣹⡏⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⣠⣾⣿⣿⣿⣿⣿⣿⣿⡿⠿⢟⢮⡽⢪⣷⣻⠾⣟⡻\n"
                     + u8"⣷⣺⠿⠿⠿⠿⣵⠿⠿⡿⢿⣿⠿⠿⠿⢿⡿⠿⠿⠿⣿⠿⠿⠿⠿⣿⠷⣾⡿⢿⣟⣿⣿⠿⠿⠾⣼⡿⢷⣿⠿⣿⠿⠿⢿⠿⣽⠿⢽⡿⢿⡧⠿⠿⠿⣿⣳⡻⢿⡽⣦⢿⣿⣿⣄⢾⢕⣜⢗⡏⣯⣳⣝⢾⢱⡦⡎⣻⣟⡻⡇⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⡀⢀⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⠏⢔⡗⡮⣯⢪⡜⢴⢦⡗⣿⡫⢽\n"
                     + u8"⡺⢻⡀⢉⣉⡉⣿⡀⡆⠦⠐⣿⡀⣶⣶⣿⡶⡀⡀⠁⣿⣶⠒⣶⡀⡟⢰⡀⡇⢸⣟⣗⣷⣄⢉⣁⣼⡇⠰⠶⡀⣿⠖⡀⢾⡀⡇⢸⡀⠁⢸⡇⢰⣶⡀⢿⣝⢝⣤⣙⣗⢆⢿⣿⣿⣦⠳⣣⡯⣻⣾⢾⣌⢝⣾⣾⠻⣺⡶⡧⡇⡀⡀⡀⡀⡀⡀⣀⣤⣤⡀⡀⡀⡀⡀⠉⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⢋⣹⣧⡭⢽⡶⢧⢻⢽⢹⡟⡾⣝⣳\n"
                     + u8"⣽⣺⠒⠒⠒⠒⣿⡴⠶⠶⢀⣿⣤⣤⣤⣼⡀⣴⡀⡄⣿⠤⣤⣤⣤⡇⢸⡀⡇⢸⡿⡿⣷⣒⣀⠒⢺⠉⠉⠉⠉⢻⠚⠛⠛⠂⣿⡶⢶⠇⣼⡇⢸⣿⡀⣾⠛⣿⢗⢻⡾⡏⣆⢿⣿⣿⣿⣈⢿⡓⣏⣷⢁⠛⢻⣿⣮⣿⡿⢿⣿⡀⡀⢀⣴⣿⣿⣿⣿⣿⣿⣷⣀⡀⡀⣀⣿⣿⣿⣿⣿⣿⠿⠟⠛⢉⢭⢧⣗⣹⢎⢓⡯⣏⡷⢾⡘⡾⢽⣏\n"
                     + u8"⠵⣯⢿⡇⢸⣿⣻⣀⠛⠃⣸⣏⣉⣉⣉⣹⣦⣤⡀⠁⣿⡀⠉⠉⠉⣿⣄⣴⡇⢸⣿⢳⣿⡀⠒⠒⢺⢯⣿⡀⣿⣿⠉⣠⣄⠉⣿⢀⡀⣠⢈⣧⣤⣤⡀⣿⣦⡿⣾⣻⢷⡷⣻⡌⢿⣿⣿⣿⣿⣤⣉⣶⣿⣿⣿⣶⣤⣤⣶⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⣾⣿⣿⠿⠛⠉⡀⡀⡀⡀⡀⣿⣵⢿⡵⢯⣯⣞⡎⡝⣚⠿⡫⢺⡇⣺\n"
                     + u8"⣏⣍⡟⣯⣿⣞⣾⢾⣏⢿⡳⢿⡿⡿⡿⣟⣻⣻⣿⣿⣫⣽⡯⣻⣻⡟⣳⡿⢿⡻⣟⡿⡾⢽⣿⢟⣿⣺⣜⣟⣧⡾⣟⡿⡻⣝⣿⡿⣫⣿⢯⢞⣿⣝⣿⣽⡹⢿⣽⣷⢵⣾⡿⣻⣆⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⡀⡀⡀⡀⡀⡀⡀⡀⢰⢷⢱⢞⡗⣞⢯⡧⡾⣧⣟⢻⢗⣫⢳⡷\n"
                     + u8"⡳⢏⣿⣏⣝⢾⣽⢺⣙⢾⣟⣟⣯⢛⣷⠿⢷⣾⣜⣿⣿⣪⣮⣏⣧⡷⣮⣿⣞⢷⢣⢾⣳⣟⣿⢺⢷⢻⢳⣿⣾⢵⣾⣛⣯⣛⣇⡿⣼⣿⡻⡻⡏⠽⣿⣾⣹⣷⢾⡟⣮⣝⣽⡹⣿⣟⠌⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⡀⡀⡀⡀⡀⡀⡀⡀⣠⢿⣜⡻⣿⣎⣧⡷⡞⣦⢖⣟⣼⡯⡽⡫⢻\n"
                     + u8"⢵⢻⣅⣟⣯⣼⣟⡿⣿⣯⢽⣿⣯⡷⣽⢿⣟⣭⣯⡽⣟⣿⣯⣯⣿⣛⣷⣻⣙⡻⡞⡟⣿⡷⣷⣏⣳⢿⡾⣗⣽⣾⣿⢫⣟⣿⣟⣯⡿⢷⣯⣵⣞⢽⣟⢾⣿⣻⣯⡷⣷⢾⢾⣿⠟⣡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⡛⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⡀⡀⡀⡀⡀⣀⡾⢫⢜⢯⣬⡗⠗⡷⣳⡞⣕⢕⣻⡷⢥⣾⣽⠧\n"
                     + u8"⢮⣕⣈⣖⣿⣻⣙⣞⣼⣾⣗⣗⣷⢷⣿⣿⣮⣽⣝⡾⣟⣽⣏⣧⣞⣶⣶⣽⣖⣿⡶⢷⣷⣻⣿⣷⣾⣺⣷⣿⣇⣳⣿⣪⣾⣜⣮⣮⡝⡲⡻⣏⣳⡿⣹⣷⣗⡿⣮⣽⣳⣻⣟⢃⣾⠿⣛⣍⣖⣺⢺⣲⢲⢶⣶⡶⡶⣷⣭⢟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⡀⣀⣴⣻⣼⣑⣿⢜⡷⡮⡟⣻⡜⢟⡎⢷⣳⠏⣱⢻⢷⢣⣽\n"
                     + u8"⡧⣿⠛⠛⠛⠛⣿⠛⠛⠛⠙⣟⠛⠛⠛⢻⠛⠛⠉⠋⣿⠛⠛⠛⠛⣿⠛⠋⠙⢷⣽⣻⣏⠛⠛⠛⢹⠛⠛⢻⠉⣿⣟⣿⠛⠛⢛⠉⣿⣿⣷⠛⣿⠙⠉⣿⡛⢻⡏⢹⣿⣏⡶⣋⣾⣿⣿⠿⣿⣿⣷⢽⣾⣾⣼⣯⢿⣿⣯⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣍⣿⣿⣿⡈⠟⣧⣟⣺⣯⢿⣜⣣⣾⣏⣗⣿⡽⢶⣷⢷⣯⣯⣷⣽⣼⡿⣿\n"
                     + u8"⢷⣻⡀⠤⠤⠄⣿⡀⠃⠋⠐⣿⡀⠿⠿⣿⠛⡀⡀⠁⣿⠿⠈⠿⡀⣿⣄⣉⣀⣼⣟⣿⡗⠲⠚⠲⢺⠛⠃⢸⡀⢻⡟⣿⡀⠁⠙⡀⣿⣾⣮⡀⣟⡀⡀⣿⠁⢸⡀⢸⣍⡩⠿⠻⣭⢪⡿⡿⣽⡷⣱⣯⣺⣾⢽⢛⣛⢷⡌⠅⣿⣿⣿⣿⣿⢉⠛⠛⣋⡠⣗⣻⣞⠸⣿⣿⣿⣧⢹⢗⣏⢌⣃⣷⡫⢝⢣⢮⢴⣱⢹⡯⣫⢺⢗⡳⣗⢮⠯⢝\n"
                     + u8"⢦⣼⣉⡉⢉⣁⣿⠛⣉⡉⢰⣿⣶⣶⣶⣿⡀⠺⡀⡅⣿⠚⣶⣶⣶⣷⠂⣤⣤⣤⢷⣗⡿⠤⠤⡀⢸⡀⠿⠿⡀⣟⣟⢾⠛⣉⣉⠠⣟⣓⣿⡀⢸⠐⡀⡿⢀⡀⡇⢸⡮⢧⢻⣿⣝⣺⢳⣞⡯⣯⣿⡺⢾⣿⢿⣷⢹⣾⣷⣿⣿⣿⣿⣿⣿⣶⣦⣤⢻⡖⡻⣿⡝⣾⣿⠿⣿⣿⡆⣿⢹⣏⢟⣽⢇⣇⣖⢺⢻⣚⣳⢇⡪⢧⡜⡏⢞⢹⣕⢠\n"
                     + u8"⢼⡙⣣⣇⣸⢗⢇⣦⣄⣤⡾⣧⣤⣤⣤⣼⢿⣶⣠⣄⣿⣤⣤⣤⣤⣿⣤⣤⣤⣤⣯⢾⣿⣤⣤⣤⣼⣷⡲⣶⣤⡷⢯⢿⣷⣄⣤⣶⣟⣣⡿⢿⣾⣠⣠⡿⢿⢿⣧⣼⢫⣷⢿⣸⣮⢽⣪⣸⣽⣝⡣⣼⣻⣫⡏⡹⢀⣿⣿⠿⠿⠟⣥⣌⠿⣋⣩⢻⠇⠿⣯⣥⣴⣿⢋⠿⣸⣿⡐⣏⡯⣷⢕⣗⣮⡗⡿⣯⢞⡷⣽⡧⢮⠯⣯⢻⣕⡟⣴⣿\n"
                     + u8"⣛⣼⠉⠉⠉⠉⣿⠉⢩⢸⢉⣏⠉⠉⠉⢻⣉⡉⠉⣉⣿⠋⢻⠈⠁⣯⡿⣿⠉⠉⣻⢈⡏⡉⠉⠁⢹⡞⠉⢿⡀⣿⠉⡉⢿⡀⣿⠉⠉⡍⢹⣻⡗⣻⣻⢚⣥⣆⠛⠾⣏⣻⣺⣟⣿⣟⣷⠻⢓⡙⢦⡝⣷⣔⢠⣶⣿⣿⣿⡺⡟⣏⢻⣵⣮⣯⣿⣧⣟⣛⡎⣶⣴⡾⠾⠺⣡⣵⣛⡰⢮⣞⢽⢷⢅⢳⣾⢕⡮⡻⣮⣧⢝⢀⡙⠳⢃⣾⣿⣿\n"
                     + u8"⠮⣹⡀⠛⠛⠛⣿⠁⣸⠈⢀⡟⠃⠘⡀⢻⠒⠒⠓⠒⢿⢸⡀⡀⡀⣿⣧⣿⢁⣀⣻⢘⡏⢀⣼⡀⢸⡀⣿⠈⡀⣿⡀⠁⣴⡀⣿⡀⣿⡇⠈⡟⠛⣠⣶⣿⣿⣿⣿⣿⣷⣶⣶⣦⣩⣠⣴⣿⣿⣿⣷⣙⠷⢻⣷⣙⡡⠟⡴⢻⣼⣹⣷⢎⣽⣼⢣⡟⣵⠎⢵⣮⠙⣡⣿⣿⣦⣙⠺⣞⣗⠏⢝⣻⡾⢿⢟⣓⣦⣻⣪⣼⠋⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⢓⣻⠿⣿⣿⠿⣿⡀⠛⢸⠨⡏⠩⣿⣿⣿⡏⢁⣤⠉⣿⠘⢰⡀⡀⡿⣷⡿⠃⠐⠟⠸⣿⡀⣤⡀⣿⡀⠛⢸⡀⣿⡟⠈⠇⠸⣿⡀⠛⠃⢸⡆⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⠻⣿⣕⢗⡿⣫⣽⡽⢿⡳⢾⢱⠇⡴⣦⣤⣾⣿⣿⣿⣿⣿⣿⣿⣦⣠⣾⣿⣶⣌⠛⠿⣼⣗⣿⠧⢁⣿⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⣝⢻⡶⣶⣶⢶⠿⢋⣷⣼⣴⡙⣴⣶⣶⣾⡷⣤⢠⣶⣿⣿⣿⣤⣤⣷⡙⠿⣋⣿⣿⣤⠻⣶⣤⡶⡻⢿⢾⢿⣤⡿⣴⣷⠶⣂⣵⣿⣿⣧⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣤⡛⠻⠋⣉⣁⣉⡛⠛⢋⣥⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⢹⣷⡇⡺⠟⣡⣾⣿⣿⣿⣿⣿⣦⠿⡮⣽⣾⢅⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣉⠳⣩⡛⠿⣯⠾⢋⣬⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⡼⣾⠞⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣙⠽⢉⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⠋⣴⡟⡀⣿⡀⣿⢀⡀⡇⢰⡇⢰⣿⡀⣿⣿⣿⡀⣤⢰⡀⣿⠶⠂⡀⠦⣿⡀⣤⣤⣴⣿⣿⣗⢠⣤⡇⢸⣿⣿⡟⣠⠘⡄⣸⣤⠄⣠⡀⣿⡀⣤⡾⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻\n"
                     + u8"⣿⣿⣠⣷⣸⡀⣇⢸⠇⡇⢸⡇⢸⣿⡀⣠⣿⣿⡀⣿⢸⡀⣼⢙⣋⣈⡋⣿⡀⣉⡉⢙⣿⣿⣟⢸⣿⡇⢠⣿⣿⡇⣿⡀⡇⣾⣀⣴⣷⣀⣿⡀⣿⡏⢀⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⣿⣿⡇⠘⠛⠛⣿⡀⢀⡇⠸⣧⣀⣉⡀⣿⣿⣿⣀⣉⣸⡀⣿⣤⣤⣤⡀⣿⠛⠃⠘⠛⣿⣿⣯⠈⣉⠁⢸⣿⣿⣧⠈⣰⠃⢺⡟⡀⠋⡀⣿⡀⣉⡉⠸⣧⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⣿⣿⣿⢿⣿⠿⣿⣿⣿⢿⢿⣿⠿⢿⡿⣿⣿⣿⣿⣿⡿⡿⣿⣿⣿⣿⠿⣿⣿⣿⣿⠿⠿⣿⣿⢿⣿⡿⣿⡿⣿⣿⡿⣿⣿⢿⣿⠿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⣿⣿⡀⡆⢹⡀⣿⢰⢸⢈⢸⡇⠰⠶⠶⢾⣿⣿⣷⡀⡂⠃⣿⣶⡄⢸⡀⣿⣿⣿⣄⣛⣋⣠⣿⡀⣶⡆⢸⡷⡀⢶⡀⣿⡀⡆⠘⡀⣿⡀⣶⡇⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⣿⣿⡀⡏⢠⡀⣷⡦⢦⡸⣨⣏⣉⣉⣉⣹⣿⣿⣿⡀⡀⠃⣿⣿⡀⣿⡀⣿⣿⣿⠒⠂⠒⠲⡟⠛⠛⠛⠛⡷⠛⠶⠦⣿⣶⠤⣿⢠⣿⡀⣿⡇⢠⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⣿⣿⣄⣀⣿⡀⣿⢁⡀⢀⠈⣇⠈⠉⠉⢻⣿⣿⣄⣾⡀⡇⣿⣀⣾⣿⡀⣿⣿⣿⡀⠶⠶⠸⣿⣿⡀⣿⣿⡟⢋⣤⠙⣿⠋⣄⢁⡀⣿⣀⣀⡀⢸⣧⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\n"
                     + u8"⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛\n";
    UINT OriginCP = GetConsoleOutputCP();
    SetConsoleOutputCP(CP_UTF8);
	std::cout << InvisibleDragon;
    SetConsoleOutputCP(OriginCP);
    cout << "| 투명 트래곤 : ";
    std::string HowlingSTR = std::string("크아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아아");

    Length = HowlingSTR.length();
    for (size_t IDX = 0; IDX < Length; ++IDX)
    {
        std::cout << HowlingSTR[IDX];

        DELAY_MILLI(1);
    }
    DELAY_MILLI(5000);
    system("cls");

}

BossMonster::~BossMonster()
{
    // 투명드래곤 소멸시 출력되는 메시지.
    if (Health <= 0)
    {
        cout << "| 투명 트래곤 : ";
        std::string HowlingSTR = "크아아아악\n";
        size_t Length = HowlingSTR.length();
        for (size_t IDX = 0; IDX < Length; ++IDX)
        {
            std::cout << HowlingSTR[IDX];

            DELAY_MILLI(250);
        }
    }
}

const std::string& BossMonster::GetName() const
{
    // 투명드래곤의 이름을 반환.
    return Name;
}

int BossMonster::GetHealth() const
{
    // 투명드래곤의 체력을 반환.
    return Health;
}

int BossMonster::GetAttack() const
{
    // 투명드래곤의 공격력을 반환.
    return Attack;
}

void BossMonster::TakeDamage(int Damage)
{
    // 데미지를 받아 몬스터의 체력이 감소.
    if (Health > 0)
    {
        Health -= Damage;
    }
}

Item* BossMonster::DropItem()
{
    // 체력 회복 포션과 공격력 증가 포션을 랜덤하게 드랍.
    random_device R;
    mt19937 Gen(R());
    uniform_int_distribution<int> DropChance(1, 100);
    uniform_int_distribution<int> ItemType(0, 1);
    int Drop = DropChance(Gen);

    // 아이템 드랍 확률 30%
    if (Drop <= 30)
    {
        if (ItemType(Gen) == 0)
        {
            return new HealthPotion();
        }
        else
        {
            return new AttackBoost();
        }
    }
    else
    {
        return nullptr;
    }
}